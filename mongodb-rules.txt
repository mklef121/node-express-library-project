6 Rules of Thumb for MongoDB Schema Design



When designing a MongoDB schema and wants to implement a “One-to-N” relationship, you will need to understand

a) what is the cardinality of the relationship?
	characterize your “One-to-N” relationship with a bit more nuance: 
	is it “one-to-few”, “one-to-many”, or “one-to-squillions”?



Basics: Modeling One-to-Few
	
	An example of “one-to-few” might be the addresses for a person.
	db.person.findOne()
	{
	  name: 'Kate Monster',
	  ssn: '123-456-7890',
	  addresses : [
	     { street: '123 Sesame St', city: 'Anytown', cc: 'USA' },
	     { street: '123 Avenue Q', city: 'New York', cc: 'USA' }
	  ]
	}

	 The main advantage is that you don’t have to perform a separate query to get the embedded details; 
	 the main disadvantage is that you have no way of accessing the embedded details as stand-alone entities.


Basics: One-to-Many (also covers Many-to-Many)
	
	An example of “one-to-many” might be parts for a product in a replacement parts ordering system.
	Each product may have up to several hundred replacement parts, 

	db.parts.findOne()
	{
	    _id : ObjectID('AAAA'),
	    partno : '123-aff-456',
	    name : '#4 grommet',
	    qty: 94,
	    cost: 0.94,
	    price: 3.99 
	}

	Each Product would have its own document, which would contain an array of ObjectID references

	db.products.findOne()
	{
	    name : 'left-handed smoke shifter',
	    manufacturer : 'Acme Corp',
	    catalog_number: 1234,
	    parts : [     // array of references to Part documents
	        ObjectID('AAAA'),    // reference to the #4 grommet above
	        ObjectID('F17C'),    // reference to a different Part
	        ObjectID('D2AA'),
	        // etc
	    ]
	}

	You would then use an application-level join to retrieve the parts for a particular product:
	product = db.products.findOne({catalog_number: 1234});
	product_parts = db.parts.find({_id: { $in : product.parts } } ).toArray() ;

	for the above query to be with catalog_number as query key to run well, you’d need to have an index on ‘products.catalog_number’.


Basics: One-to-Squillions
	
	An example of “one-to-squillions” might be an event logging system that collects log messages for different machines.
	It wouldn't be the one to many case since the child document could easily be overflooded more than 16mb

	db.hosts.findOne()
	{
	    _id : ObjectID('AAAB'),
	    name : 'goofy.example.com',
	    ipaddr : '127.66.66.66'
	}

	db.logmsg.findOne()
	{
	    time : ISODate("2014-03-28T09:42:41.382Z"),
	    message : 'cpu is on fire!',
	    host: ObjectID('AAAB')       // Reference to the Host document
	}

	//you can query thus

	 // find the parent ‘host’ document
 	host = db.hosts.findOne({ipaddr : '127.66.66.66'});  // assumes unique index
   	// find the most recent 5000 log message documents linked to that host
 	last_5k_msg = db.logmsg.find({host: host._id}).sort({time : -1}).limit(5000).toArray()



Two-Way Referencing

	db.person.findOne()
	{
	    _id: ObjectID("AAF1"),
	    name: "Kate Monster",
	    tasks [     // array of references to Task documents
	        ObjectID("ADF9"), 
	        ObjectID("AE02"),
	        ObjectID("AE73") 
	        // etc
	    ]
	}

	db.tasks.findOne()
	{
	    _id: ObjectID("ADF9"), 
	    description: "Write lesson plan",
	    due_date:  ISODate("2014-04-01"),
	    owner: ObjectID("AAF1")     // Reference to Person document
	}

	Both task and person are refencing each other. This makes it faster for get queries.
	Only disadvantage is that updates will be done twice in cases where tasks are reassigned to users


Denormalizing With “One-To-Many” Relationships

	Say our parts document is thus

	db.parts.findOne()
	{
	    _id : ObjectID('AAAA'),
	    partno : '123-aff-456',
	    name : '#4 grommet',
	    qty: 94,
	    cost: 0.94,
	    price: 3.99 
	}

	and we regularly need the name of the part in other documents, then we can easily denormalize the "name" attribute

	db.products.findOne()
	{
	    name : 'left-handed smoke shifter',
	    manufacturer : 'Acme Corp',
	    catalog_number: 1234,
	    parts : [
	        { id : ObjectID('AAAA'), name : '#4 grommet' },         // Part name is denormalized
	        { id: ObjectID('F17C'), name : 'fan blade assembly' },
	        { id: ObjectID('D2AA'), name : 'power switch' },
	        // etc
	    ]
	}

	//The issue with this is expensive update


Denormalizing With “One-To-Squillions” Relationships

	db.logmsg.findOne()
	{
	    time : ISODate("2014-03-28T09:42:41.382Z"),
	    message : 'cpu is on fire!',
	    ipaddr : '127.66.66.66',  //The IP address of the host document was moved here
	    host: ObjectID('AAAB')
	}


